---
# defaults file for docker
# docker 版本
docker_version: "20.10.7"
# docker 二进制安装包
docker_binary_package: "https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/static/stable/{{ ansible_architecture }}/docker-{{ docker_version }}.tgz"
# docker 服务名
docker_service_name: docker
# containerd 服务名
docker_containerd_service_name: containerd
# docker 运行用户
docker_user: docker
# docker 部署路径
docker_install_path: /usr/local/bin
# docker 配置文件路径
docker_config_path: "{{ ('/etc', docker_service_name) | path_join }}"
# docker 数据路径
docker_data_path: "{{ ('/var/lib', docker_service_name) | path_join }}"
# docker 日志路径
docker_log_path: "{{ ('/var/log', docker_service_name) | path_join }}"
# docker unix sock 文件路径
docker_unix_sock_file: "{{ ('/var/run', docker_service_name ~ '.sock') | path_join }}"
# docker pid 文件路径
docker_pid_file: "{{ ('/var/run', docker_service_name ~ '.pid') | path_join }}"
# 存储引擎，需要操作系统支持
# 查看当前内核支持的文件系统：ls -l /lib/modules/$(uname -r)/kernel/fs/
docker_storage_driver: overlay2
# 执行状态文件的根目录
docker_exec_root_path: "{{ ('/var/run', docker_service_name) | path_join }}"
# 运行的额外选项
docker_exec_opts:
  - native.cgroupdriver=systemd # 设置 cgroup 驱动为 systemd
# 在 dockerd 停止时保证已启动的 Running 容器持续运行，并在 daemon 进程启动后重新接管。
# jinja2 模板中需要字符串 true 与 false 而 Python 的布尔值首字母会大写
docker_live_restore: "false"
# 内网安全访问的仓库，支持 http 和 https
# docker_registries_insecure:
#   - harbor.example.com
# 远程拉取镜像的加速仓库
# docker_registries_mirrors:
#   - https://registry.example.com
# docker 容器中指定的上游 DNS 服务器地址
# docker_dns:
#   - 223.5.5.5
#   - 119.29.29.29
docker_log_driver: json-file
docker_log_opts:
  # 一个容器日志大小上限是500M
  max-size: 500m
  # 一个容器有三个日志，分别是id+.json、id+1.json、id+2.json
  max-file: 3
# 接口绑定的地址
docker_hosts:
  - "unix://{{ docker_unix_sock_file }}"
docker_containerd_config_path: "{{ ('/etc', docker_containerd_service_name) | path_join }}"
docker_containerd_root_path: "{{ ('/var/lib', docker_containerd_service_name) | path_join }}"
docker_containerd_state_path: "{{ ('/run', docker_containerd_service_name) | path_join }}"
docker_containerd_socket_file: "{{ (docker_containerd_state_path, docker_containerd_service_name ~ '.sock') | path_join }}"
docker_containerd_opt_path: "{{ ('/opt', docker_containerd_service_name) | path_join }}"
